1/12/14

the good: drop outs work
the bad: disconnects and quits don't, and drop outs are allowed when you're the only player on your computer, but another is online. Fix dat!

very close, but must go pick up those gifts. bbl

so disconnects also work now I think?
yes they do.

done:
make pauses not stop the game time any players online

todo:
Don't send packets if momentum is the same
make levels sent in packets too  (if theirlevel > yourlevel, yourlevel = theirlevel)
average all positions/angles/momentum between what's sent and what we have
send number of player you are sitting on

flashing in/out bug if both players host on lan

===

1/11/14

Disconnects:
so we remember someone is connected because ever 100 ticks, we get a message (roughly 60 ticks/sec)
if no message from an ip, +1 to disconnecting[i] for ip in slot i
if disconnecting[i] > 10sec (which is 10*60*60 ticks) then drop the player (just get rid of them!)
remember which players are associated with which IPs at any time
note if an ip sends a message without a player
  in that case, drop that player and disassociate the player with the ip

oi! That's a lot of conditions. Let's break it down:

onlinePlayers[max];

receiveMessage(…);

// This method puts all found players from this message into an array
populatePlayerInMessage();

for (i = 0; i<knownIps; i++) {
  if (packet.ip == knownIp[i]) {
    if (knownIpDisconnect[i] != 0) {
      knownIpDisconnect[i] = 0;
    }
    // Also: check which players are still in
    for (knownIpPlayer.size) {
      if (knownIpPlayer[i] && !playerInMessage[i]) {
        // Player was in these messages, but isn't any more. Must have dropped!
        dropPlayer(knownIpPlayer[i]);
      }
    }
  } else {
    // No messages? Might be disconnected…
    knownIpDisconnect[i]++;

    if (knownIpDisconnect[i] > 10*60*60) {
      // Disconnected! Been too long
      knownIp[i] = null;
      knownIpDisconnect[i] = 0;
      for (knownIpPlayers.size) {
        dropPlayer(knownIpPlayers[j]);
      }
    }

  }
}


hmmm. Can break it down more.

onlinePlayers[max];

...

receiveMessage(…);

rememberPlayersReceived();

dropIdlePlayers();

===

1/10/14

Maybe the clients are spamming their own IP's socket with Broadcast?
nono, because it happens in Online, not just LAN

wait
we're always increasing ticks
therefore we're always spamming new packets to everyone
bleaugh! Get rid of it!
only send packets if new data before the ticks

wow, not sending packets with no new data other than ticks (unless no players online yet, then we send it to get recognized)
This might still hurt >1 other player joining, so keep an eye on that.
(eg. We have two people connected, doing nothing, so no packets sent. Maybe send packets occasionally otherwise so a new player can grab on to something)

Next: get players dropping nicely, maybe make packets even more lightweight & infrequent

===

1/9/14

lag seems to relate to when I do a lot on one end, and then trying to do something on the other end.
methinks the socket is backed up - that is, it can only handle a receive or a send, not both, so… only do one for each socket. Use two sockets, one outgoing and one incoming. Differentiate by using one to send as host vs one to send as client, and vice versa for reception

No, issue is always from Windows to Mac. Sending Mac to Windows is snappy, regardless of LAN/Online or Host/Client. Windows to Mac is always delayed though. Small windows UDP buffer?

Windows has been hosting each time. Maybe a hosting thing?
Ahhh!
It is alway the host being delayed in its data reaching the client
if the host jumps, it takes a sec for client to get it.
However!
Client immediately gets its data to the host.
Mystery half-solved!
or:
clients are terrible at receiving packages.

===

1/8/14

Wow! Got a lot done today, but still not done with networking yet.
getLocalAddress still not working on LAN Join command,
need to pull from github (2.1 isn't up to date enough) and compile it for myself
https://github.com/LaurentGomila/SFML/commit/713aed707912bc6bf5b47632ed46efc707925eda
http://en.sfml-dev.org/forums/index.php?topic=8142.15
also need to address players not dropping when quitting

libsfml-etc files must also now be copied to framework
snd is also missing? Not sure if a concern

===

1/6/14

only add player when (after connecting online) you hit OK for controls' infos

Two problems remain:
1) Players remain even after they quit the game. Should disappear instead.
2) If the rearrange happens before the rearranged player starts the game, then everything is broken by the start menu popping up (so make menus the same as the original player in the rearrange transfer)

Other than that… is this thing 2 person online ready?

===

1/5/14

Cubior's belated todo, starting 1/5/14
yes, it's almost the same as the log, but I like todo better. The log isn't quite the style I'd like.

moving networking today from terminal/console based networking to ingame networking
