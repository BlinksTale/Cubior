6/29/14

problem with transparencies and shadows under them
the issue is that crumbling blocks are drawn like regular blocks, so they get permanent shadows but also permanently obstruct them, even if invisible.
The solution: draw them separately so that they are drawn on top of what it would look like if they weren't there. But, allowing for depth buffers and whatnot so they still appear normally (behind walls in front of them, etc)

cheap solution for shadows of disappearing cubes: multiply by alpha of source cube?

===

6/26/14

alpha is doing some strange stuff with our old shadow and silhouette stencils
fix this so anything with alpha less than x is not drawn for those tests… or something?

===

6/25/14

transparencies look odd since draw order is based on level layout, not relation to camera
change this so things farther from camera get drawn sooner

===

6/19/14

so we can definitely use GL_BLEND to do transparencies, even with color arrays
but glColorPointer must have 4 as its first value, not 3, and myColors must then have a fourth slot for every color - alpha.
Once these two are in then the gl blending should happen automatically.
http://msdn.microsoft.com/en-us/library/windows/desktop/dd318811(v=vs.85).aspx

===

6/15/14

remove Drop Out option in Pause if alone
remove Camera Controls option - done

pressing enter should complete the ip phase
pressing a number should enter the first number from nothing in ip, not adding it to the end
pressing escape should quit

===

6/14/14

something is wrong with the networked multiplayer or any multiplayer not having weight to jumping with someone on your head IF we use landing on another's head as a way to slow down your opponents.
So do we want that or not?

In other news, INSANE progress on level design and mechanics.

I have just discovered:
gaps, the tunnels with one side missing, like ledges but more tunnel-ey
secret paths with crumbling blocks, magnetic ledge ceilings, and one-way spring exits
moving platforms with multiple surfaces and obstacles that would push you off various ones
moving all-springs platforms, hang slipping from beneath or have a very hard time on top
moving platform path limited to against a wall or inside it, so it's timer disappearing

also:
springs offer choice since they quickly move you to new areas, eg. gap path vs ledges path 
choke points waiting for a platform to appear, especially at corners, for all to catch up
paths halfway along a moving platform's path, like gaps in the wall (secret shortcuts?)

===

6/8/14

I am now successfully sending data for all players through the host, yet only registering it if not for one's self. However! I think I ought to register it for one's self if the self is being manipulated.

Mac still can't seem to host on LAN, or Windows can't seem to join. Either way, issue here.

===

4/27/14

springs work, now get them pulled in right and looking right
part of this too is abstracting how we store visuals (no goal or spring, just vertices)

odd: the cube objects aren't being found when they're requested. Not sure if setSelf is working for itemShape, but regardless: it's not going through right now, and getX/Y/Z is failing

===

4/12/14

Spring is starting to be in! One spring with functionality is in, but needs to be read from the maps and needs to support many springs (do we cap this? Maybe 20? Also needs to be put into a vertex and index array so we aren't doing a draw call per spring)

===

4/8/14

really need to revise the rendering system
have a method for each shape that outputs its shape array and another for its color array
then have flatRender just merge these for all objects, only updating the moving ones

===

4/7/14

add depth
springs first, good default for new item types
crumbling blocks second
switches and gates third

===

4/5/14

Networking works on Linux again!
might not work in 32 bit, so try checking this 

todo:
1. Reset networking on quit from a networked game, so it doesn't persist
2. If host, accept data from more than one IP, and pass that data to all IPs that are not it (or make a custom version of your package for each client that is all data but theirs)
3. if distance to any other players > x, use abs position


===

3/28/14

1. Eileen note: hit escape repeatedly to quit! Escape should not act as an affirmation button, make it quit the game.
2. send landedOn offset if landedOn not moving
3. when you quit an online game, reset everything so that it doesn't have those rejoining bugs in case you start another online game

done:
1. use libraries with .2 at end for Eileen's Mac - fixed! but just followed sfml website
2. switch to IP sending instead of broadcast on LAN once host found (clients broadcast at start) - done!


===

3/27/14

Trying to build on Linux again - whoa!
Got a lot further than expected, but tons of issues still
/usr/include/X11 in particular
this library seems to have all kinds of bad overlap with SFML's networking definitions
eg. enum Status in sfml/network/ftp.hpp has a conflict  with #define Status int in X11/Xlib.h
so enum Status appears as enum int, which doesn't work.
Try fixing this by separating the two? Not sure why both are being looked at. Possible graphics/networking overlap issue

---

so we fixed packet buildup by reading in ten packets for every tick, awesome
now todo:
1. Send direction players are facing (had this one, got rid of it - put it back!)
2. Send offset if landed on a player, apply only if no joystick force received
3. Figure out why sometimes the positions are wrong and staying wrong even if no player collision

===

3/26/14

justHitPlayer isn't working
always sends true, should send false if not touching anyone
need it so on collisions, movement isn't limited, but on no player collisions, pos is exact

===

3/25/14

also send position
if collision, do not apply position
else do?


===

3/24/14

Got something working
sending positive momentum on y with moveX and moveZ values from keyboard file
this moves the player to the right position, and gives them some jump lift
but still can be off by a bit, so at least for X/Z, need to interpolate to correct position over time
(can be 1% per frame, as long as we keep moving the right direction)

so todo:
send position data again, and move towards that position (faster if no competing momentum?)

---

Send:
Player collisions?
  LandedOn?
    Landed on player with offset (landed on offset)
  else
    Pushed player with offset (pushed offset or force applied)
else
  Changed momentum at position/changed pos, both w/o player collisions

Packet examples:
player num, event type (enums), relevant data;
event 0 (pos/momentum update): pos x,y,z, mom x,y,z, direction
event 1 (coll side): offset x,y,z, force applied x,y,z, direction
event 2 (landed on): offset x,y,z, 

--

wait… send input and pos/offset instead
no new input? send pos and stop sending
maybe correct pos every 100 frames

if position of online cube is within colliding distance of my cube, don't force update position
wait, no
if (delta > collDelta && !colliding)
  updatePositions();
else just use momentum (in collisions or close enough for collisions)

so! Send position, joyX/Y, momentumY (not jump I don't think)
then if not colliding and not in collision range, 

===

3/17/14

Networked gameplay:
Send data in vague senses so that inconsistencies don't cause glitches
no, not vague
Send data in descriptions of key events only

Key events:
Player landed on a certain player / movable object, has an offset
Player position/offset moved to x
Player collided with another player / movable object

Nonkey events:
player collided with a wall


===

3/2/14

if collision, only send momentum
if no collision, also position

===

2/24/14

issue currently is overlapping collisions online
the old data arrives for the top player, putting them lower than they should be
leading to the local player (bottom player) overlapping them
and a crazy spasm between the two, and then ending up in the center of the map
so… how to fix this?

momentum is currently disabled. Will re-enabling fix this? Or just reintroduce issues with not being able to push each other around?

Can we project where the top player is supposed to be based on the old data that's coming through, and adjust them to be closer to the right spot but also close to their current spot?

Maybe check which of the six sides the last collision was on, and if the new collision is a polar opposite, discount it and revert to the old side (no immediate transitions or pushes *through* the other player)

===

2/23/14

LAN Host Broadcasting is BAD
Switch to Client broadcasting until host replies, then direct to IP
wait - isHost takes priority over LAN in network broadcasting
so the host isn't broadcasting regardless
but that anyone is broadcasting. No broadcasting on LAN after connection established!
Client must listen for replies from host
foundHost should be an ip variable… well the else has this
we should only use LAN if (lan && !senderAddress)
and make senderAddress null on LAN until we get a packet from the host
who is acting as isHost, and will send messages naturally
awesome, that should work

thinking I should switch to that no-pos-set-if-moved-by-another-player system
not entirely sure how to implement it yet, but the basic idea is that if you are colliding with another player, their position is not going to keep getting reset

so online players' positions are only set if no collisions with other players locally?
that way it's all momentum based. Because the incoming position data is what's messing with this pushing stuff.

The pushing would feel natural if no position data came in during a push
but what if the pushes ended up in different places on the two devices?
push stops, positions are reset…?

===

2/17/14

Yeah I definitely have three logs now basically. Priorities, log, and todo. Eh, whatever works. This gives levels to my notes' in-depth-ness at least.
Basically disabled anything's setPosition if their landedOnCount > 0
so you follow the player under you unless you jump off
this gives a good illusion at least
maybe next: record that offset from landedOn and send that instead (I like that idea)

===

1/21/14

the way to get landedOn to work across the net for bottom player's view:
bottom player must influence top player even locally
if landedOn data is coming through the net, must keep it as landedOn until changed online
so if setLandedOn called or w/e, do not allow a -1/fall until a -1 is sent

===

1/12/14

the good: drop outs work
the bad: disconnects and quits don't, and drop outs are allowed when you're the only player on your computer, but another is online. Fix dat!

very close, but must go pick up those gifts. bbl

so disconnects also work now I think?
yes they do.

done:
make pauses not stop the game time any players online

todo:
Don't send packets if momentum is the same
make levels sent in packets too  (if theirlevel > yourlevel, yourlevel = theirlevel)
average all positions/angles/momentum between what's sent and what we have
send number of player you are sitting on
drop networking/stop listening on a restart/return to room 0/universal pause

flashing in/out bug if both players host on lan

===

1/11/14

Disconnects:
so we remember someone is connected because ever 100 ticks, we get a message (roughly 60 ticks/sec)
if no message from an ip, +1 to disconnecting[i] for ip in slot i
if disconnecting[i] > 10sec (which is 10*60*60 ticks) then drop the player (just get rid of them!)
remember which players are associated with which IPs at any time
note if an ip sends a message without a player
  in that case, drop that player and disassociate the player with the ip

oi! That's a lot of conditions. Let's break it down:

onlinePlayers[max];

receiveMessage(…);

// This method puts all found players from this message into an array
populatePlayerInMessage();

for (i = 0; i<knownIps; i++) {
  if (packet.ip == knownIp[i]) {
    if (knownIpDisconnect[i] != 0) {
      knownIpDisconnect[i] = 0;
    }
    // Also: check which players are still in
    for (knownIpPlayer.size) {
      if (knownIpPlayer[i] && !playerInMessage[i]) {
        // Player was in these messages, but isn't any more. Must have dropped!
        dropPlayer(knownIpPlayer[i]);
      }
    }
  } else {
    // No messages? Might be disconnected…
    knownIpDisconnect[i]++;

    if (knownIpDisconnect[i] > 10*60*60) {
      // Disconnected! Been too long
      knownIp[i] = null;
      knownIpDisconnect[i] = 0;
      for (knownIpPlayers.size) {
        dropPlayer(knownIpPlayers[j]);
      }
    }

  }
}


hmmm. Can break it down more.

onlinePlayers[max];

...

receiveMessage(…);

rememberPlayersReceived();

dropIdlePlayers();

===

1/10/14

Maybe the clients are spamming their own IP's socket with Broadcast?
nono, because it happens in Online, not just LAN

wait
we're always increasing ticks
therefore we're always spamming new packets to everyone
bleaugh! Get rid of it!
only send packets if new data before the ticks

wow, not sending packets with no new data other than ticks (unless no players online yet, then we send it to get recognized)
This might still hurt >1 other player joining, so keep an eye on that.
(eg. We have two people connected, doing nothing, so no packets sent. Maybe send packets occasionally otherwise so a new player can grab on to something)

Next: get players dropping nicely, maybe make packets even more lightweight & infrequent

===

1/9/14

lag seems to relate to when I do a lot on one end, and then trying to do something on the other end.
methinks the socket is backed up - that is, it can only handle a receive or a send, not both, so… only do one for each socket. Use two sockets, one outgoing and one incoming. Differentiate by using one to send as host vs one to send as client, and vice versa for reception

No, issue is always from Windows to Mac. Sending Mac to Windows is snappy, regardless of LAN/Online or Host/Client. Windows to Mac is always delayed though. Small windows UDP buffer?

Windows has been hosting each time. Maybe a hosting thing?
Ahhh!
It is alway the host being delayed in its data reaching the client
if the host jumps, it takes a sec for client to get it.
However!
Client immediately gets its data to the host.
Mystery half-solved!
or:
clients are terrible at receiving packages.

===

1/8/14

Wow! Got a lot done today, but still not done with networking yet.
getLocalAddress still not working on LAN Join command,
need to pull from github (2.1 isn't up to date enough) and compile it for myself
https://github.com/LaurentGomila/SFML/commit/713aed707912bc6bf5b47632ed46efc707925eda
http://en.sfml-dev.org/forums/index.php?topic=8142.15
also need to address players not dropping when quitting

libsfml-etc files must also now be copied to framework
snd is also missing? Not sure if a concern

===

1/6/14

only add player when (after connecting online) you hit OK for controls' infos

Two problems remain:
1) Players remain even after they quit the game. Should disappear instead.
2) If the rearrange happens before the rearranged player starts the game, then everything is broken by the start menu popping up (so make menus the same as the original player in the rearrange transfer)

Other than that… is this thing 2 person online ready?

===

1/5/14

Cubior's belated todo, starting 1/5/14
yes, it's almost the same as the log, but I like todo better. The log isn't quite the style I'd like.

moving networking today from terminal/console based networking to ingame networking
