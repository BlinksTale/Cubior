Cubior Development, by Brian Handy
---
1/16/12
Got windows version of cpp file working today

setup: git on Windows: http://help.github.com/win-set-up-git/
setup: git repo from github: git clone git://github.com/BlinksTale/cubior.git

remember: windows change drive cmd: cd /D E: for E drive

compile: windows Visual Studio 2005 Command Prompt: cl /EHsc cubior.cpp

---
1/17/12
Setup on a fesh linux box

Linux setup: git on Linux: sudo apt-get install git-core
Linux setup: c++ on Linux: sudo apt-get install g++

---
1/19/12

setup: linux GL and GLUT installation
setup: get OpenGL ready: http://www.cs.lmu.edu/~ray/notes/opengl/
setup: get OpenGL displaying something: http://www.cs.lmu.edu/~ray/notes/openglexamples/

---
1/20/12

accomplishment: got header files working! Now using multiple files for visuals
setup: must now compile with: g++ textRender.cpp visuals.cpp cubior.cpp

build: must currently use command: gcc flatRender.cpp textRender.cpp visuals.cpp -I/usr/X11R6/include -L/usr/X11R6/bin -o cubior cubior.cpp -lglut -lGL
build: ^that is because I am using Dr. Toal's code atm for testing out the visuals system

---
1/21/12

build: windows version is: gcc flatRender.cpp textRender.cpp visuals.cpp -D_STDCALL_SUPPORTED -o cubior cubior.cpp glut32.lib -lglu32 -lopengl32

setup: windows needs freeglut, which needs to be unpacked and configured (use ./configure in MinGW)

build: windows WORKING v.Triangle, line 1: gcc -c -o triangle.o triangle.cpp -I"C:\MinGW\freeglut\include"
build: windows WORKING v.Triangle, line 2: gcc -o triangle.exe triangle.o -L"C:\MinGW\freeglut\lib" -lfreeglut -lopengl32 -Wl, --subsystem,windows
build: windows WORKING v.Triangle, line 3: ./triangle.exe

build: note, windows WORKING comes from http://www.transmissionzero.co.uk/computing/using-glut-with-mingw/
build: note, windows WORKING requires lib and include folders in MinGW, and a freeglut.dll in PATH somewhere (from SysWOW64 or System32)

---
1/22/12

build: windows WORKING v.Triangle all-in-one: gcc -c -o triangle.o triangle.cpp -I"C:\MinGW\freeglut\include" && gcc -o triangle.exe triangle.o -L"C:\MinGW\freeglut\lib" -lfreeglut -lopengl32 -Wl, --subsystem,windows && ./triangle.exe

---
1/23/12

build: windows PERFECT v.flatRender all-in-one: gcc -I"C:\MinGW\freeglut\include" -L"C:\MinGW\freeglut\lib" -o flatRender flatRender.cpp -lfreeglut -lopengl32 -Wl,--subsystem,windows && ./flatRender.exe

note: though gcc on Windows and Unix point to very different locations and use different libraries, the framework for the command is very similar

build: windows FINAL all-in-one: g++ flatRender.cpp textRender.cpp visuals.cpp -I"C:\MinGW\freeglut\include" -L"C:\MinGW\freeglut\lib" -o cubior cubior.cpp -lfreeglut -lopengl32 -Wl,--subsystem,windows && ./cubior.exe
warning: don't forget that gcc doesn't use g++ by default, and using g++ can be much friendlier, actually.

problem: it appears nothing runs after initFlat gets called from outside of initFlat
solution: gameplay gets called from initFlat, sadly

question: should I use SDL? http://www.libsdl.org/

---
1/24/12

note: using a makefile now btw, so type "make" while in src/ in terminal and project will compile & run

note: arrow keys are special in glut, so pass a function to glutSpecialFunc for them, and to glutKeyboardFunc for all ASCII keys

---
1/26/12

note: same issue as always for keyboard! Have to use bools to fix this

todo: hashtables and key value pair, implement these somehow

---
1/31/12

note: makefiles are weird. This tutorial almost helped, but it didn't work for cubior as it is already. http://mrbook.org/tutorials/make/

---
2/10/12

note: finally got makefile working, had to link when making EXE, not .o files
note: this still looks ugly, but it speeds up compiling times

---
2/11/12

note: openGL z buffering doesn't work if gluPerspective nearZ is less than 0.5
note: "Specifying a zNear clipping plane value of 0.0 to gluPerspective() won't generate an OpenGL error, but it might cause depth buffering to act as if it's disabled. A negative zNear or zFar clipping plane value would produce undesirable results." -opengl.org
note: when calling glClear, also need to pass GL_DEPTH_BUFFER_BIT

error: "redefinition of" or "previous definition of"
solution: put ifdefs around the header, so it doesn't get made twice

remember: ifdef at the beginning of header files to make sure not declared twice

question: I'm worried about getPlayer()->methodHere() being inefficient, but segfaults otherwise

problem: no bin folder means Macs won't compile
solution: .gitignore that ignores everything but itself in /bin/

---
2/12/12

note: abstracted cubiorShape today, gave it independence and transfered invincibility to cubiorObj from gameplay, then made multiplayer

problem: Windows was not compiling GLU functions
solution: added -lglu32 to graphics libraries list in makefile

---
2/23/12

note: override needs virtual in front of base functions in header
note: midterms have slowed development! Spring break next week, so expect lotsa progress!

doc: fill out Wiki architecture, design, implementation, testing

---
2/29/12

note: the great falling through blocks issue has been solved!
fix: bounce applied in direction of least resistance. My code recognized that no resistance (zero) was wrong, disregarding it for movement, but accidentally used it for comparisons. This made perfectly aligned blocks fall through each other
problem: there's still a snag on moving against the blocks' order, but nothing more

---
3/7/12

note: diamond explosion collision has been started and completed. It works!
question: should there be a perma-collisionMap for non-moving objects? Only set at beginning?

---
3/15/12
look up linear interpolation for collision detection, Megally's recommendation

---
3/22/12
note: addToCollisionMap abstracted today, passing the whole map right now, pointer better?

---
3/26/12 (11pm)
note: first playlets is epic success. Sam Verhassalt + roomies, Haley and Quinn all agree game is fun to play. Lots of excitement from collaborative platforming (red box straight up is a challenge, but not impossible or frustrating). The four cubes all at once make it hectic. Abandon camera movement and splitscreen in favor of simplicity of single screen gameplay?
keynote: fun accomplished. Must ensure now that fun for multiple audiences as well as fun for multiple playthroughs
note: wii remotes were used, 1 and 2 both jump (it's better this way). Initial confusion over orientation of controller
note: Sam and Quinn returned to accomplish red cube touching goal again alone, tried to jump from far corner, succeeded
note: loved simple colors, loved emotions on characters
note: audience was making sex jokes moments prior - proof that game can work with simple colors and emotions regardless of audience's other activities
note: everyone liked it? Really? #weSoExcite

---
3/30/12
test: Nicky and Alexander Braus, tried 3 player w/ me for set camera lvl1
test: suggested level 2 with two end goals to touch (checkpoint system?)
test: suggested level 3 staircase, with button to step on to make staircase appear
test: Nicky liked the locking cube effect, said it was cool (bring it back?)
test: enjoyed the game in general! Also found king of the hill mode since we can push each other

---
3/31/12
bug: screen was allowing transparency with splitscreen so entire past was drawn
fix: put the screen clear after the scissor cut was already made, so clears are limited to that area