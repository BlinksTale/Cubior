Cubior Development, by Brian Handy
---
1/16/12
Got windows version of cpp file working today

setup: git on Windows: http://help.github.com/win-set-up-git/
setup: git repo from github: git clone git://github.com/BlinksTale/cubior.git

remember: windows change drive cmd: cd /D E: for E drive

compile: windows Visual Studio 2005 Command Prompt: cl /EHsc cubior.cpp

---
1/17/12
Setup on a fesh linux box

Linux setup: git on Linux: sudo apt-get install git-core
Linux setup: c++ on Linux: sudo apt-get install g++

---
1/19/12

setup: linux GL and GLUT installation
setup: get OpenGL ready: http://www.cs.lmu.edu/~ray/notes/opengl/
setup: get OpenGL displaying something: http://www.cs.lmu.edu/~ray/notes/openglexamples/

---
1/20/12

accomplishment: got header files working! Now using multiple files for visuals
setup: must now compile with: g++ textRender.cpp visuals.cpp cubior.cpp

build: must currently use command: gcc flatRender.cpp textRender.cpp visuals.cpp -I/usr/X11R6/include -L/usr/X11R6/bin -o cubior cubior.cpp -lglut -lGL
build: ^that is because I am using Dr. Toal's code atm for testing out the visuals system

---
1/21/12

build: windows version is: gcc flatRender.cpp textRender.cpp visuals.cpp -D_STDCALL_SUPPORTED -o cubior cubior.cpp glut32.lib -lglu32 -lopengl32

setup: windows needs freeglut, which needs to be unpacked and configured (use ./configure in MinGW)

build: windows WORKING v.Triangle, line 1: gcc -c -o triangle.o triangle.cpp -I"C:\MinGW\freeglut\include"
build: windows WORKING v.Triangle, line 2: gcc -o triangle.exe triangle.o -L"C:\MinGW\freeglut\lib" -lfreeglut -lopengl32 -Wl, --subsystem,windows
build: windows WORKING v.Triangle, line 3: ./triangle.exe

build: note, windows WORKING comes from http://www.transmissionzero.co.uk/computing/using-glut-with-mingw/
build: note, windows WORKING requires lib and include folders in MinGW, and a freeglut.dll in PATH somewhere (from SysWOW64 or System32)

---
1/22/12

build: windows WORKING v.Triangle all-in-one: gcc -c -o triangle.o triangle.cpp -I"C:\MinGW\freeglut\include" && gcc -o triangle.exe triangle.o -L"C:\MinGW\freeglut\lib" -lfreeglut -lopengl32 -Wl, --subsystem,windows && ./triangle.exe

---
1/23/12

build: windows PERFECT v.flatRender all-in-one: gcc -I"C:\MinGW\freeglut\include" -L"C:\MinGW\freeglut\lib" -o flatRender flatRender.cpp -lfreeglut -lopengl32 -Wl,--subsystem,windows && ./flatRender.exe

note: though gcc on Windows and Unix point to very different locations and use different libraries, the framework for the command is very similar

build: windows FINAL all-in-one: g++ flatRender.cpp textRender.cpp visuals.cpp -I"C:\MinGW\freeglut\include" -L"C:\MinGW\freeglut\lib" -o cubior cubior.cpp -lfreeglut -lopengl32 -Wl,--subsystem,windows && ./cubior.exe
warning: don't forget that gcc doesn't use g++ by default, and using g++ can be much friendlier, actually.

problem: it appears nothing runs after initFlat gets called from outside of initFlat
solution: gameplay gets called from initFlat, sadly

question: should I use SDL? http://www.libsdl.org/

---
1/24/12

note: using a makefile now btw, so type "make" while in src/ in terminal and project will compile & run

note: arrow keys are special in glut, so pass a function to glutSpecialFunc for them, and to glutKeyboardFunc for all ASCII keys

---
1/26/12

note: same issue as always for keyboard! Have to use bools to fix this

todo: hashtables and key value pair, implement these somehow

---
1/31/12

note: makefiles are weird. This tutorial almost helped, but it didn't work for cubior as it is already. http://mrbook.org/tutorials/make/

---
2/10/12

note: finally got makefile working, had to link when making EXE, not .o files
note: this still looks ugly, but it speeds up compiling times

---
2/11/12

note: openGL z buffering doesn't work if gluPerspective nearZ is less than 0.5
note: "Specifying a zNear clipping plane value of 0.0 to gluPerspective() won't generate an OpenGL error, but it might cause depth buffering to act as if it's disabled. A negative zNear or zFar clipping plane value would produce undesirable results." -opengl.org
note: when calling glClear, also need to pass GL_DEPTH_BUFFER_BIT

error: "redefinition of" or "previous definition of"
solution: put ifdefs around the header, so it doesn't get made twice

remember: ifdef at the beginning of header files to make sure not declared twice

question: I'm worried about getPlayer()->methodHere() being inefficient, but segfaults otherwise

problem: no bin folder means Macs won't compile
solution: .gitignore that ignores everything but itself in /bin/

---
2/12/12

note: abstracted cubiorShape today, gave it independence and transfered invincibility to cubiorObj from gameplay, then made multiplayer

problem: Windows was not compiling GLU functions
solution: added -lglu32 to graphics libraries list in makefile

---
2/23/12

note: override needs virtual in front of base functions in header
note: midterms have slowed development! Spring break next week, so expect lotsa progress!

doc: fill out Wiki architecture, design, implementation, testing

---
2/29/12

note: the great falling through blocks issue has been solved!
fix: bounce applied in direction of least resistance. My code recognized that no resistance (zero) was wrong, disregarding it for movement, but accidentally used it for comparisons. This made perfectly aligned blocks fall through each other
problem: there's still a snag on moving against the blocks' order, but nothing more

---
3/7/12

note: diamond explosion collision has been started and completed. It works!
question: should there be a perma-collisionMap for non-moving objects? Only set at beginning?

---
3/15/12
look up linear interpolation for collision detection, Megally's recommendation

---
3/22/12
note: addToCollisionMap abstracted today, passing the whole map right now, pointer better?

---
3/26/12 (11pm)
note: first playlets is epic success. Sam Verhassalt + roomies, Haley and Quinn all agree game is fun to play. Lots of excitement from collaborative platforming (red box straight up is a challenge, but not impossible or frustrating). The four cubes all at once make it hectic. Abandon camera movement and splitscreen in favor of simplicity of single screen gameplay?
keynote: fun accomplished. Must ensure now that fun for multiple audiences as well as fun for multiple playthroughs
note: wii remotes were used, 1 and 2 both jump (it's better this way). Initial confusion over orientation of controller
note: Sam and Quinn returned to accomplish red cube touching goal again alone, tried to jump from far corner, succeeded
note: loved simple colors, loved emotions on characters
note: audience was making sex jokes moments prior - proof that game can work with simple colors and emotions regardless of audience's other activities
note: everyone liked it? Really? #weSoExcite

---
3/30/12
test: Nicky and Alexander Braus, tried 3 player w/ me for set camera lvl1
test: suggested level 2 with two end goals to touch (checkpoint system?)
test: suggested level 3 staircase, with button to step on to make staircase appear
test: Nicky liked the locking cube effect, said it was cool (bring it back?)
test: enjoyed the game in general! Also found king of the hill mode since we can push each other

---
3/31/12
bug: screen was allowing transparency with splitscreen so entire past was drawn
fix: put the screen clear after the scissor cut was already made, so clears are limited to that area
note: XOR is great for alternating tiles!

---
4/14/12
note: cpp does not accept ints for floor(). Must guarantee it is int, or "Error 132" arises
note: float necessary for good camera angle turns (or at least higher precision than int 360)

---
4/27/12
note: string is in std, so need std::string or "using namespace std"
note: don't use "using namespace std" in headers, Stack Overflow calls it bad practice

---
4/28/12
note: error right now in maps. Cannot put any blocks except floor within 2 spaces of edge
note: everything else (except one artifact of a cube side) works after that

---
5/2/12
note: there seems to be an ongoing problem with getWidth() for cube when a new level is made. I think it's because it's a virtual function, but not sure.
error: getWidth causes segfault on new level for macs
fix: just putting a hard constant in its place - bad idea but works for senior presentation deadline
note: char s* doesn't work on Mac for sprintf buffer, but char s[100] does

---
8/24/12
remember: "git rm --cached file" makes it easy to take files off a command line commit, but keep the file

---
11/29/12
note: Xcode copies all files into resources of App, located in a folder accessible only by going to Preferences > Derived Data and clicking the arrow to access the directory. App is then in Cubior Folder > Build > Products > Release > Cubior.app and must be right clicked on and have Show Package Contents clicked. Then in Contents > Resources you can paste all the normal (maps/music/sfx/images) directories, and everything should work. Oi!

---
12/16/12
Mac: Xbox 360 controller driver, http://tattiebogle.net/index.php/ProjectRoot/Xbox360Controller/OsxDriver

---
1/2/13
error: if you use a joystick, then switch back to keyboard, two dir at once != no movement

---
4/15/13
todo: make a todo file for the project next time, not a log. My todos are sloppy and beautiful. This log is too clean, I never use it.
todo: try switching on/off the new/old map systems (and map_unordered) in gameplay/mapReader/map files. Memory problem still. Try splitting things up into smaller chunks to send to the graphics card, too big a chunk (though fast to process) can get stuck with no unified space in memory to land in, and give up on itself and die. That's no good!

---
5/26/13

Priorities: make camera movement XOR player movement (one or the other, never both)
finish LAN gameplay
add gates/bridges and buttons gameplay

---
5/27/13
WARNING: Installing Enet 1.3.7 breaks Xcode's ability to do stuff. "No member named 'clock_t' in the global namespace" appears only after installing enet. Maybe it's not caused by Enet… but these errors did not appear before enet was installed

WARNING: Yes, even older builds become corrupted once enet is installed. Enet is the source of these problems. Uninstall immediately? Use SFML's networking options instead if at all possible, or try an older enet

FIX: recursive include folder caused this - just use non-recursive here

PROBLEM: now not finding enet at all :P

---
6/18/13
PROBLEM: Enet does not have 386 support right now in my configure/install/make install'd file?
FIXME: Cubior Mac build architecture was changed from both (32/64) to just 64 bit. This is NOT a real fix.
Target > Build Settings > Architecture > Standard (32/64) is what it should be
but it's currently just 64, since ENET is not finding the 386 achitecture stuff somehow?

---
7/7/13
problem: only the first game to boot gets any incoming data. All send, only the first booted receives

---
7/13/13
added what should support joysticks in any order, not sure if working though (need testing hardware)

---
8/24/13
Problem when returning to title screen: "No available peers for initializing an ENet connection"
Fix: perhaps disabling networking on title screen? Resetting it?

---
8/27/13
Problem with Fourth player on a Gamepad/Joystick only moving on 1/4 of directions/axis
Ugly fix: adding one to the JoyY array fixes it.

Problem with keyboard and joysticks sharing controls (p2 joystick joins, WASD stop working as camera for p1)
Want: to save data on IP addresses, ala Terraria

---
9/19/13
Problem with lag on 4p big castle still: even shaders don't fix this! The only cause of polygons now are the ridges for the walls. Other than that, we can have one per wall and it still lags.
Fix: Possibly the array holding everything? Switch to a map/dictionary for this next. 

---
9/20/13
todo: shader for cloud shadows moving across the ground? (maybe someday a shader for outlines around cubior)
todo: hashmap/dictionary for cube map. This should help performance on big castle (or remove ridges?)
todo:

---
9/22/13
halfway through trying to remove freedom of camera movement
commented out one line in CameraObj.cpp
//updateJustFixedVisibility();
and two chunks in gameplay.cpp, immediately under where it says
// Finally, make camera catchup

---
9/23/13
great, using automatedCamera instead. Now just auto-send a command for the nearest angle on finish of drop-in

---
9/24/13
do something like moveToPlayer in gameplay.cpp, but do it only to a certain range, and constantly